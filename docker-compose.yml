services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - cfiles-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./testfiles:/files
      - ./uploads:/uploads
      - ./quarantine:/quarantine
    networks:
      - cfiles-network
    depends_on:
      - rabbitmq
      - clamav
      - postgres
    env_file:
      - ./.env

  workers:
    build:
      context: .
      dockerfile: ./workers/Dockerfile
    networks:
      - cfiles-network
    depends_on:
      - rabbitmq
      - postgres
      - clamav
    volumes:
      - ./testfiles:/files
      - ./uploads:/uploads
      - ./quarantine:/quarantine
    env_file:
      - ./.env

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ./.env
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - cfiles-network

  postgres:
    image: postgres:latest
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cfiles-network

  clamav:
    image: clamav/clamav:latest
    container_name: clamav
    ports:
      - "3310:3310"
    restart: always
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./testfiles:/files
      - ./uploads:/uploads
      - ./quarantine:/quarantine
    networks:
      - cfiles-network

networks:
  cfiles-network:
    driver: bridge

volumes:
  postgres-data:
